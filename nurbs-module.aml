;To display the nurbs module run the following function:
;(display-nurbs-module)

(in-package :aml)

;;;; Model ;;;;

(define-class point-collection
  :inherit-from (object)
  :properties (
              (ref-coord-sys :class coordinate-system-class
                    origin (list 0.0 0.0 0.0)
                  )
               points-list      '((0.0 0.0 0.0) (7.0 0.0 0.0))
               weight-points 		'((1.0 -1.0 0.0 1.0) (2.0 1.0 0.0 1.0) (3.0 2.0 0.0 1.0) (4.0 1.0 0.0 1.0) (5.0 0.0 0.0 1.0) (6.0 -2.0 0.0 1.0))
                              )
  :subobjects (
              (nurb-curve :class nurb-curve-object
                    reference-coordinate-system ^^ref-coord-sys

                    start-point (first ^^points-list)
                    end-point (nth 1 ^^points-list)

                    start-weight (list (append ^start-point (list 1)))
                    end-weight (list (append ^end-point (list 1)))

                    points (append ^start-weight ^^weight-points ^end-weight)
                    rational? t
                    homogeneous? t

                )


    )
  )


(define-method get-points-list point-collection ()
  !points-list
  )

(define-method get-weight-points point-collection ()
  !weight-points
  )

(define-method get-ref-coord-sys point-collection ()
  !ref-coord-sys
  )

(define-method smash-points-method point-collection ()
  (smash-value !points-list)
  )

(define-method change-points-list point-collection (new-points-list)
  (change-value !points-list new-points-list)
  )

(define-method change-weight-points point-collection (new-weight-points)
    (progn
      (smash-value !weight-points)
      (change-value !weight-points new-weight-points)
    )
  )


;;;; Controller ;;;;



(define-class nurbs-controller
  :inherit-from(object)
  :properties(
          model-points (get-points-list (the point-collection))
          model-weight (get-weight-points (the point-collection))
          model-coord-sys (get-ref-coord-sys (the point-collection))
        )
  )

(define-method get-controller-points nurbs-controller ()
  !model-points
)
(define-method get-controller-weight nurbs-controller ()
  !model-weight
)

(define-method get-controller-coord-sys nurbs-controller ()
  !model-coord-sys
)

(define-method change-controller-weight nurbs-controller (new-weight-points)
  (change-value !model-weight new-weight-points)
  (change-weight-points (the point-collection) !model-weight)
)
(define-method change-controller-points nurbs-controller (new-points)
  (change-value !model-points new-points)
  (change-points-list (the point-collection) !model-points)
)

(define-method change-controller-weight-coords nurbs-controller (point-number position)
   (progn (change-value !model-weight (let
                                  ((weight-points !model-weight)
                                   (new-point (let ((l1 (nth point-number weight-points)) (l2 position)) (replace l1 l2) l1))
                                   )
                                  (replace (nth point-number weight-points) new-point)
                                  (smash-value !model-weight)
                                  weight-points
                                  )

               )
           (change-weight-points (the point-collection) !model-weight)
        )
 )


;;;; View ;;;;


(define-class helping-points
  :inherit-from (object)
  :properties(
              points-list   (get-controller-points (the nurbs-controller))
              weight-points (loop for w in (get-controller-weight (the nurbs-controller))
                                  collect (butlast w)
                                  )
              ref-coord-sys (get-controller-coord-sys (the nurbs-controller))
    )
  :subobjects(
            (ui-end-points :class series-object
            quantity 		(length ^^points-list)
            class-expression	'box-object
            series-prefix 	'p
            init-form '(
                        id 			^index
                        reference-coordinate-system ^^ref-coord-sys
                        line-width 	4
                        color 		'green
                        height 0.03
                        width  0.03
                        depth  0.001
                        ;orientation (list (translate '(^index 0.0 0.0)))
                        orientation (list (translate (nth ^index ^points-list)))

                        ;coordinates	(list (nth 0 (nth ^index ^points-list))
                       ;                   (nth 1 (nth ^index ^points-list)) (nth 2 (nth ^index ^points-list)))


                       )
               )
               (ui-weight-points :class series-object
               quantity 		(length ^^weight-points)
               class-expression	'box-object
               series-prefix 	'w
               init-form '(
                           id 			^index
                           reference-coordinate-system ^^ref-coord-sys
                           line-width 	4
                           color 		'red
                           height 0.03
                           width  0.03
                           depth  0.001
                           ;orientation (list (translate '(^index 0.0 0.0)))
                           orientation (list (translate (nth ^index ^^weight-points)))

                           ;coordinates	(list (nth 0 (nth ^index ^points-list))
                          ;                   (nth 1 (nth ^index ^points-list)) (nth 2 (nth ^index ^points-list)))


                          )
                  )

            )
)

(define-method get-ui-weight-point-instances helping-points ()
  (series-members (the ui-weight-points))
  )
(define-method get-ui-weight-point-coords helping-points ()
  !weight-points
)

(define-method translate-helping-points helping-points ()
    (let   (
                (point-number (mouse-select-point-from-display !weight-points))
                (point-instance (nth point-number (series-members (the ui-weight-points))))
                  )
                (progn
                  (interactive-translate point-instance)
                  (change-controller-weight-coords (the nurbs-controller) point-number (nth 0 (the position (:from point-instance))))
                )
            )
 )



(define-class link-editor-form-class
  :inherit-from(ui-form-class)
  :properties(
              ;background-color 'snow2
              label "NURBS Module"
              height (* 0.6 (nth 1 (get-screen-size)))
              width  (* 0.6 (nth 0 (get-screen-size)))
              y-offset (- ^height (* 0.5 ^height))
              x-offset (- ^width (* 0.5 ^width))

              button-y-offset 95

              weight-points (get-controller-weight (the nurbs-controller))
              weight-points-quantity (length ^weight-points)
              points-list (get-controller-points (the nurbs-controller))
              )
  :subobjects(

              (canvas :class 'ui-canvas-class
                  measurement 'percentage
                  x-offset 30 y-offset 5 width 70 height 90
                  )
              (graphic-toolbar :class 'ui-graphic-control-toolbar-class
                  canvas-object ^canvas
                  measurement 'percentage
                  height 5
                  width 70
                  x-offset 30
                  y-offset 95
                  )

              (draw-curve-action-button :class 'ui-action-button-class
                  measurement 'percentage
                  height 5
                  width 10
                  y-offset 7
                  x-offset 2
                  label "Draw Curve"
                  Button1-action '(progn  (draw (the helping-points))
                                          (draw (the point-collection))
                                          (update (the superior link-editor-form-class))
                                          (update (the superior canvas))
                                          (regen)
                                          (zoom :all)
                                          )
                  )
              (move-point-action-button :class 'ui-action-button-class
                  measurement 'percentage
                  height 5
                  width 10
                  y-offset 7
                  x-offset 12
                  label "Drag point"

                  Button1-action '(progn (translate-helping-points (the helping-points))
                                         (update (the superior weight-sheet))
                                         (regen)
                                         (draw (the helping-points)))
                  )
              (point-sheet :class 'ui-spreadsheet-class
                  measurement 'percentage
                  x-offset 2
                  y-offset 40
                  width 21
                  height 12
                  column-labels (list "x-coord" "y-coord" "z-coord")
                  row-labels (list "Start point" "End point")
                  cell-values ^^points-list
                  number-of-columns (length ^column-labels)
                  number-of-rows 2
                  row-height   25
                  column-width 53
                  attachment-info-list '(top bottom left right)
                  editable? t

                  )

              (weight-sheet :class 'ui-spreadsheet-class
                  measurement 'percentage
                  x-offset 2
                  y-offset 60
                  width 22
                  height 30
                  column-labels (list "x-coord" "y-coord" "z-coord" "weight")
                  row-labels (loop for row from 0 to ^^weight-points-quantity
                               collect (format nil "Point ~a" row)
                               )
                  cell-values ^^weight-points
                  number-of-columns (length ^column-labels)
                  number-of-rows ^^weight-points-quantity
                  row-height   25
                  column-width 50
                  attachment-info-list '(top bottom left right)
                  editable? t

                  )
              (toolbar :class 'ui-toolbar-class
                  measurement 'percentage
                  height 5
                  width 20
                  y-offset 95
                  x-offset 7
                  Availability-list nil
                  Button1-action-list '((weight-sheet-apply (the superior link-editor-form-class))
                                        (weight-sheet-add-row (the superior link-editor-form-class))
                                        (weight-sheet-remove-row (the superior link-editor-form-class))
                                        )
                  Button3-action-list nil
                  Images-list (list (concatenate (logical-path :ui-bitmaps) "apply.bmp") (concatenate (logical-path :ui-bitmaps) "add-object.bmp") (concatenate (logical-path :ui-bitmaps) "delete-object.bmp"))
                  Labels-list (list "Apply" "Add node" "Remove node")
                  Number-of-buttons (length ^Button1-action-list)
                  Orient (nth 0 '(:horizontal :vertical))
                  Tooltips-list nil
                  )
              )
  )



(define-method weight-sheet-apply link-editor-form-class ()
  (progn
    (change-controller-weight (the nurbs-controller) (loop for row from 0 to (- (the weight-sheet number-of-rows) 1)
                                                      collect (loop for cell from 0 to 3
                                                                collect (read-from-string (get-cell-value (the weight-sheet) row cell))
                                                                )
                                                          )
      )
    (change-controller-points (the nurbs-controller) (loop for row from 0 to (- (the point-sheet number-of-rows) 1)
                                                          collect (loop for cell from 0 to 2
                                                                    collect (read-from-string (get-cell-value (the point-sheet) row cell))
                                                                    )
                                                              )
        )

    (update (the weight-sheet))
    (regen)
    (draw (the helping-points))
    )
  )

(define-method weight-sheet-add-row link-editor-form-class ()
  (progn
    (change-controller-weight (the nurbs-controller) (append
                                                              (loop for row from 0 to (- (the weight-sheet number-of-rows) 1)
                                                                   collect (loop for cell from 0 to 3
                                                                             collect (read-from-string (get-cell-value (the weight-sheet) row cell))
                                                                             )
                                                                      )
                                                               (list '(0.0 0.0 0.0 1.0))
                                                            )
      )
     (update (the weight-sheet))
     (regen)
     (draw (the helping-points))
    )
  )

(define-method weight-sheet-remove-row link-editor-form-class ()
  (progn
    (change-controller-weight (the nurbs-controller) (butlast (loop for row from 0 to (- (the weight-sheet number-of-rows) 1)
                                                       collect (loop for cell from 0 to 3
                                                                 collect (read-from-string (get-cell-value (the weight-sheet) row cell))
                                                                 )
                                                          ))
        )
     (update (the weight-sheet))
     (regen)
     (draw (the helping-points))
    )
  )

(defun display-nurbs-module ()
  (progn
      (create-model 'point-collection)
      (create-model 'nurbs-controller)
      (create-model 'helping-points)
      (add-object (the interface forms) 'link-editor 'link-editor-form-class)
      (display (the interface forms link-editor))
      (activate-display (the interface forms link-editor canvas))
      (set-current-display-background-color 'grey49)
      )
   )
